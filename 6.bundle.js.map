{"version":3,"sources":["webpack:///./components/dnd-rules.js","webpack:///./components/views/dnd-rules-view.js","webpack:///./util/data.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-repeat.js"],"names":["rules","type","Array","selectedRule","Object","value","observer","contentsOrder","id","title","this","htmlcontent","dispatchEvent","CustomEvent","bubbles","composed","detail","name","$","rulescontent","innerHTML","tables","querySelectorAll","table","hash","length","hashName","category","values","rule","set","window","scrollTo","undefined","super","then","data","rulesObject","parentlist","push","shadowRoot","currentSelection","connectedCallback","selectionChangeHandler","e","selection","deselectionChangeHandler","addEventListener","disconnectedCallback","removeEventListener","el","target","closest","getAttribute","a","customElements","define","cache","async","loadModel","modelId","hasOwnProperty","promises","loadJSON","Promise","all","itemData","basicItemData","variantData","propertyList","typeList","itemList","basicItemList","basicitems","itemPropertyList","itemProperty","itemTypeList","itemType","i","abbreviation","JSON","parse","stringify","entries","toLowerCase","variantList","concat","tier","inherits","rarity","source","page","requires","armor","curBasicItem","curBasicItemName","j","curVariant","curRequires","hasRequired","indexOf","requiredProperty","excludes","curExcludes","excludedProperty","curInherits","tmpBasicItem","inheritedProperty","namePrefix","nameSuffix","k","tmpText","dmgType","replace","dmgTypeToFull","genericBonus","split","join","unshift","pushObject","targetObject","objectToBePushed","copiedObject","item","noDisplay","property","properties","resist","stealth","strength","scfType","mergeItemsData","loadAllItemData","monsterData","legendaryGroupData","legendaryGroupList","legendaryGroup","lairActions","regionalEffects","monster","thisGroup","lairaction","regionaleffect","parseLegendaryMonsters","loadAllMonsterData","modelData","index","srcURL","allData","srcData","console","error","loadModelFromIndex","isArray","loadModelFromSingleJSON","url","fetch","response","ok","Error","json","domRepeatBase","DomRepeat","items","as","String","indexAs","itemsIndexAs","sort","Function","filter","observe","delay","Number","renderedItemCount","notify","readOnly","initialCount","targetFramerate","_targetFrameTime","computed","__instances","__limit","Infinity","__pool","__renderDebouncer","__itemsIdxToInstIdx","__chunkCount","__lastChunkTime","__sortFn","__filterFn","__observePaths","__ctor","__isDetached","template","__detachInstance","style","display","wrappedParent","parentNode","__attachInstance","querySelector","MutationObserver","disconnect","__render","childList","instanceProps","mutableData","parentModel","forwardHostProp","prop","i$","inst","notifyInstanceProp","idx","path","JSCompiler_renameProperty","notifyPath","__dataHost","_methodHost","functionOrMethodName","methodName","obj","__getMethodHost","apply","arguments","__functionFromPropertyValue","__debounceRender","rate","Math","ceil","performance","now","__requestRenderChunk","requestAnimationFrame","__renderChunk","currChunkTime","ratio","round","change","warn","__handleItemPath","__initializeChunking","paths","fn","debounce","after","bind","__ensureTemplatized","__applyFullRefresh","_setRenderedItemCount","__tryRenderChunk","isntIdxToItemsIdx","array","b","itemsIdxToInstIdx","instIdx","limit","min","itemIdx","_setPendingProperty","_flushProperties","__insertInstance","__detachAndRemoveInstance","wrappedRoot","root","children","appendChild","parent","insertBefore","splice","model","pop","__stampInstance","beforeRow","beforeNode","hidden","_showHideChildren","itemsPath","slice","dot","itemsIdx","substring","parseInt","itemSubPath","__handleObservedPaths","itemPath","_setPendingPropertyOrPath","instance","modelForElement","is"],"mappings":"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","file":"6.bundle.js","sourcesContent":["import {PolymerElement, html} from '@polymer/polymer';\nimport \"@polymer/polymer/lib/elements/dom-repeat.js\";\nimport loadModel from \"../util/data.js\";\nimport \"./styles/material-styles.js\";\nimport \"./styles/my-styles.js\";\nimport { jqWrap, initCollapseToggles, encodeForHash, decodeForHash } from \"../js/utils.js\";\nimport { clearRouteSelection, setRouteSelection, routeEventChannel, readRouteSelection } from '../util/routing.js';\n\nclass DndRules extends PolymerElement {\n  \n  static get properties() {\n    return {\n      rules: {\n        type: Array\n      },\n      selectedRule: {\n        type: Object,\n        value: '',\n        observer: '_selectedRuleChange'\n      },\n      contentsOrder: {\n        type: Array,\n        value: () => {\n          return [\n            { id: \"charactercreation\", title: \"Character Creation\" },\n            { id: \"equipment\", title: \"Equipment\" },\n            { id: \"playingthegame\", title: \"Playing the Game\" },\n            { id: \"runningthegame\", title: \"Running the Game\" },\n            { id: \"setting\", title: \"Setting\" },\n            { id: \"unearthedarcana\", title: \"Unearthed Arcana\" }\n          ];\n        }\n      }\n    };\n  }\n\n  static get observers() {\n    return [\n      '_openRuleFromHash(hash, rules)'\n    ]\n  }\n\n  _selectedRuleChange() {\n    if (this.selectedRule && this.selectedRule.htmlcontent) {\n      this.dispatchEvent(new CustomEvent(\"title-change\", {\n        bubbles: true,\n        composed: true,\n        detail: { title: this.selectedRule.name }\n      }));\n      this.$.rulescontent.innerHTML = this.selectedRule.htmlcontent;\n      let tables = this.$.rulescontent.querySelectorAll(\"table\");\n      for (let table of tables) {\n        jqWrap(table, '<div class=\"table-scroll-wrap\">');\n      }\n    }\n  }\n\n  _openRuleFromHash() {\n    if (this.rules && this.hash && this.hash.length > 1) {\n      let hashName = decodeForHash(this.hash)[0];\n      let selectedRule;\n      for (let category of Object.values(this.rules)) {\n        for (let rule of category) {\n          if (rule.name === hashName) {\n            selectedRule = rule;\n            break;\n          }\n        }\n        if (selectedRule) {\n          break;\n        }\n      }\n      if (selectedRule) {\n        this.set(\"selectedRule\", selectedRule);\n        window.scrollTo(0,0);\n      } else {\n        clearRouteSelection(true);\n      }\n    } else {\n      this.set(\"selectedRule\", undefined);\n    }\n  }\n\n  constructor() {\n    super();\n    loadModel(\"rules\").then((data) => {\n      const rulesObject = {};\n      const rules = data;\n      for (let rule of rules) {\n        if (rulesObject[rule.parentlist]) {\n          rulesObject[rule.parentlist].push(rule);\n        } else {\n          rulesObject[rule.parentlist] = [rule];\n        }\n      }\n      this.set('rules', rulesObject);\n      initCollapseToggles(this.shadowRoot);\n      let currentSelection = readRouteSelection();\n      if (currentSelection) {\n        this.hash = currentSelection;\n      }\n    });\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.selectionChangeHandler = (e) => {\n      if (e.detail && e.detail.selection) {\n        this.hash = e.detail.selection;\n      }\n    };\n    this.deselectionChangeHandler = () => {\n      this.set(\"selectedRule\", undefined);\n    }\n    routeEventChannel().addEventListener(\"selection-change\", this.selectionChangeHandler);\n    routeEventChannel().addEventListener(\"selection-deselected\", this.deselectionChangeHandler);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    this.deselectionChangeHandler();\n    routeEventChannel().removeEventListener(\"selection-change\", this.selectionChangeHandler);\n    routeEventChannel().removeEventListener(\"selection-deselected\", this.deselectionChangeHandler);\n  }\n\n  _getCategoryRules(id, rules) {\n    return rules ? rules[id] : '';\n  }\n\n  _openRule(e) {\n    let el = e.target.closest('.mdc-list-item');\n    let category = el.getAttribute(\"category\");\n    let rule = el.getAttribute(\"rule\");\n    let hash = encodeForHash(this.rules[category][rule].name);\n    setRouteSelection(hash);\n  }\n\n  _exists(a) {\n    return !!a;\n  }\n\n  static get template() {\n    return html`\n      <style include=\"material-styles my-styles\"></style>\n\n      <div class=\"rules-wrapper\" hidden$=\"[[_exists(selectedRule)]]\">\n        <template is=\"dom-repeat\" items=\"[[contentsOrder]]\" as=\"category\">\n          <div class=\"collapse collapse--left-arrow\">\n            <div class=\"collapse-toggle\">\n              <div class=\"mdc-list-item rule-title mdc-theme--on-surface\">\n                [[category.title]]\n              </div>\n            </div>\n            <div class=\"collapse-wrapper\">\n              <ul class$=\"collapse-list rules [[category.id]]\">\n                <template is=\"dom-repeat\" items=\"[[_getCategoryRules(category.id, rules)]]\" as=\"rule\">\n                  <div\n                    class=\"mdc-list-item mdc-theme--on-surface\"\n                    on-click=\"_openRule\"\n                    category$=\"[[category.id]]\"\n                    rule$=\"[[index]]\"\n                  >\n                    <span class=\"name col-xs-12\">[[rule.name]]</span>\n                  </div>\n                </template>\n              </ul>\n            </div>\n          </div>\n        </template>\n      </div>\n\n      <div id=\"rulescontent\" hidden$=\"[[!_exists(selectedRule)]]\"></div>\n    `;\n  }\n}\n\ncustomElements.define('dnd-rules', DndRules);","import {PolymerElement, html} from '@polymer/polymer';\nimport '../styles/material-styles.js';\nimport '../styles/my-styles.js';\nimport '../dnd-rules';\n\nclass DndRulesView extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"material-styles my-styles\"></style>\n\n      <dnd-rules></dnd-rules>\n    `;\n  }\n}\n\ncustomElements.define('dnd-rules-view', DndRulesView);","import {cloneDeep} from \"../js/utils.js\";\nimport Parser from \"./Parser.js\";\n\nlet cache = {};\n\n/**\n * Returns model data object, serving the cached version if already requested.\n * @param {String} modelId Model ID for the data being requested.\n */\nexport default async function loadModel(modelId) {\n\tif (modelId) {\n\t\t// Checks model cache for data\n\t\tif (!cache.hasOwnProperty(modelId)) {\n\t\t\t// Catch for items.json to load additional data\n\t\t\tswitch (modelId) {\n\t\t\t\tcase \"items\":\n\t\t\t\t\tcache[modelId] = await loadAllItemData();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"bestiary\":\n\t\t\t\t\tcache[modelId] = await loadAllMonsterData();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"spells\":\n\t\t\t\tcase \"classes\":\n\t\t\t\t\tcache[modelId] = await loadModelFromIndex(modelId);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tcache[modelId] = await loadModelFromSingleJSON(modelId);\n\t\t\t}\n\t\t}\n\t\treturn cache[modelId];\n\t} else {\n\t\tconsole.error(\"Missing modelID\");\n\t\treturn [];\n\t}\n}\n\n/**\n * Loads JSON from the given URL.\n * @param {String} url Makes request to specified URL, returns JSON\n */\nfunction loadJSON(url) {\n  return fetch(url)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    });\n};\n\nasync function loadModelFromSingleJSON(modelId) {\n\tconst modelData = await loadJSON(`/data/${modelId}.json`);\n\tif (Array.isArray(modelData)) {\n\t\treturn modelData;\n\t} else {\n\t\tconsole.error(\"Array data not found from model JSON\");\n\t\treturn [];\n\t}\n}\n\nasync function loadModelFromIndex(modelId) {\n\tconst modelData = await loadJSON(`/data/${modelId}/index.json`);\n\tif (modelData.index) {\n\t\tlet promises = [];\n\n\t\tfor (let srcURL of Object.values(modelData.index)) {\n\t\t\tpromises.push(loadJSON(`/data/${modelId}/${srcURL}`));\n\t\t}\n\t\treturn Promise.all(promises).then(data => {\n\t\t\tlet allData = [];\n\n\t\t\tfor (let srcData of data) {\n\t\t\t\tallData = allData.concat(srcData);\n\t\t\t}\n\n\t\t\treturn allData;\n\t\t});\n\t} else {\n\t\tconsole.error(\"Model index data not found from model JSON\");\n\t\treturn [];\n\t}\n}\n\nfunction loadAllMonsterData() {\n\tconst promises = [];\n\n\tpromises.push(loadJSON(`/data/bestiary.json`));\n\tpromises.push(loadJSON(`/data/legendarygroups.json`));\n\n\treturn Promise.all(promises).then(data => {\n\t\treturn parseLegendaryMonsters(data[0], data[1]);\n\t});\n}\n\nfunction parseLegendaryMonsters(monsterData, legendaryGroupData) {\n  const legendaryGroupList = {};\n\n  for (let legendaryGroup of legendaryGroupData) {\n    legendaryGroupList[legendaryGroup.name] = {\n      lairActions: legendaryGroup.lairActions,\n      regionalEffects: legendaryGroup.regionalEffects\n    };\n  }\n\n  for (let monster of monsterData) {\n    if (monster.legendaryGroup) {\n      const legendaryGroup = monster.legendaryGroup;\n      if (legendaryGroup) {\n        const thisGroup = legendaryGroupList[legendaryGroup];\n        if (thisGroup.lairActions) monster.lairaction = cloneDeep(thisGroup.lairActions);\n        if (thisGroup.regionalEffects) monster.regionaleffect = cloneDeep(thisGroup.regionalEffects);\n      }\n    }\n  }\n  return monsterData;\n}\n\n/**\n * Loads and merges all Item data.\n */\nfunction loadAllItemData() {\n\tconst promises = [];\n\n  promises.push(loadJSON(\"/data/items.json\"));\n  promises.push(loadJSON(\"/data/basicitems.json\"));\n\tpromises.push(loadJSON(\"/data/magicvariants.json\"));\n\n  return Promise.all(promises).then((data) => {\n\t\treturn mergeItemsData(data[0], data[1], data[2]);\n  });\n}\n\nfunction mergeItemsData(itemData, basicItemData, variantData) {\n  const propertyList = {};\n  const typeList = {};\n  let itemList = itemData;\n\n\tlet basicItemList = basicItemData.basicitems;\n\tconst itemPropertyList = basicItemData.itemProperty;\n\tconst itemTypeList = basicItemData.itemType;\n\t// Convert the property and type list JSONs into look-ups, i.e. use the abbreviation as a JSON property name\n\tfor (let i = 0; i < itemPropertyList.length; i++) propertyList[itemPropertyList[i].abbreviation] = itemPropertyList[i].name ? JSON.parse(JSON.stringify(itemPropertyList[i])) : {\"name\": itemPropertyList[i].entries[0].name.toLowerCase(), \"entries\": itemPropertyList[i].entries};\n\tfor (let i = 0; i < itemTypeList.length; i++) typeList[itemTypeList[i].abbreviation] = itemTypeList[i].name ? JSON.parse(JSON.stringify(itemTypeList[i])): {\"name\": itemTypeList[i].entries[0].name.toLowerCase(), \"entries\": itemTypeList[i].entries};\n\n\tlet variantList = variantData;\n\titemList = itemList.concat(basicItemList);\n\tfor (let i = 0; i < variantList.length; i++) {\n\t\tvariantList[i].tier = variantList[i].inherits.tier;\n\t\tvariantList[i].rarity = variantList[i].inherits.rarity;\n\t\tvariantList[i].source = variantList[i].inherits.source;\n\t\tvariantList[i].page = variantList[i].inherits.page;\n\t\tif(!variantList[i].entries && variantList[i].inherits.entries) variantList[i].entries=JSON.parse(JSON.stringify(variantList[i].inherits.entries));\n\t\tif(variantList[i].requires.armor) variantList[i].armor = variantList[i].requires.armor\n\t}\n\titemList = itemList.concat(variantList);\n\tfor (let i = 0; i < basicItemList.length; i++) {\n\t\tconst curBasicItem = basicItemList[i];\n\t\tbasicItemList[i].category = \"Basic\";\n\t\tif(curBasicItem.entries === undefined) curBasicItem.entries=[];\n\t\tconst curBasicItemName = curBasicItem.name.toLowerCase();\n\t\tfor (let j = 0; j < variantList.length; j++) {\n\t\t\tconst curVariant = variantList[j];\n\t\t\tconst curRequires = curVariant.requires;\n\t\t\tlet hasRequired = curBasicItemName.indexOf(\" (\") === -1;\n\t\t\tfor (const requiredProperty in curRequires) if (curRequires.hasOwnProperty(requiredProperty) && curBasicItem[requiredProperty] !== curRequires[requiredProperty]) hasRequired=false;\n\t\t\tif (curVariant.excludes) {\n\t\t\t\tconst curExcludes = curVariant.excludes;\n\t\t\t\tfor (const excludedProperty in curExcludes) if (curExcludes.hasOwnProperty(excludedProperty) && curBasicItem[excludedProperty] === curExcludes[excludedProperty]) hasRequired=false;\n\t\t\t}\n\t\t\tif (hasRequired) {\n\t\t\t\tconst curInherits = curVariant.inherits;\n\t\t\t\tconst tmpBasicItem = JSON.parse(JSON.stringify(curBasicItem));\n\t\t\t\tdelete tmpBasicItem.value; // Magic items do not inherit the value of the non-magical item\n\t\t\t\ttmpBasicItem.category = \"Specific Variant\";\n\t\t\t\tfor (const inheritedProperty in curInherits) {\n\t\t\t\t\tif (curInherits.hasOwnProperty(inheritedProperty)) {\n\t\t\t\t\t\tif (inheritedProperty === \"namePrefix\") {\n\t\t\t\t\t\t\ttmpBasicItem.name = curInherits.namePrefix+tmpBasicItem.name;\n\t\t\t\t\t\t} else if (inheritedProperty === \"nameSuffix\") {\n\t\t\t\t\t\t\ttmpBasicItem.name += curInherits.nameSuffix;\n\t\t\t\t\t\t} else if (inheritedProperty === \"entries\") {\n\t\t\t\t\t\t\tfor (let k = curInherits.entries.length-1; k > -1; k--) {\n\t\t\t\t\t\t\t\tlet tmpText = curInherits.entries[k];\n\t\t\t\t\t\t\t\tif (typeof tmpText === \"string\") {\n\t\t\t\t\t\t\t\t\tif (tmpBasicItem.dmgType) tmpText = tmpText.replace(\"{@dmgType}\", Parser.dmgTypeToFull(tmpBasicItem.dmgType));\n\t\t\t\t\t\t\t\t\tif (curInherits.genericBonus) tmpText = tmpText.replace(\"{@genericBonus}\", curInherits.genericBonus);\n\t\t\t\t\t\t\t\t\tif (tmpText.indexOf(\"{@lowerName}\") !== -1) tmpText = tmpText.split(\"{@lowerName}\").join(curBasicItemName);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttmpBasicItem.entries.unshift(tmpText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\ttmpBasicItem[inheritedProperty] = curInherits[inheritedProperty];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titemList.push(tmpBasicItem);\n\t\t\t}\n\t\t}\n\t}\n\t\n\n  let pushObject = (targetObject, objectToBePushed) => {\n    const copiedObject = JSON.parse(JSON.stringify(targetObject));\n    copiedObject.push(objectToBePushed);\n    return copiedObject;\n  };\n\n\tfor (let i = 0; i < itemList.length; i++) {\n\t\tconst item = itemList[i];\n\t\tif (item.noDisplay) continue;\n\t\tif (itemList[i].type === \"GV\") itemList[i].category = \"Generic Variant\";\n\t\tif (itemList[i].category === undefined) itemList[i].category = \"Other\";\n\t\tif (item.entries === undefined) itemList[i].entries=[];\n\t\tif (item.type && typeList[item.type]) for (let j = 0; j < typeList[item.type].entries.length; j++) itemList[i].entries = pushObject(itemList[i].entries,typeList[item.type].entries[j]);\n\t\tif (item.property) {\n\t\t\tconst properties = item.property.split(\",\");\n\t\t\tfor (let j = 0; j < properties.length; j++) if (propertyList[properties[j]].entries) for (let k = 0; k < propertyList[properties[j]].entries.length; k++) itemList[i].entries = pushObject(itemList[i].entries,propertyList[properties[j]].entries[k]);\n\t\t}\n\t\t//The following could be encoded in JSON, but they depend on more than one JSON property; maybe fix if really bored later\n\t\tif (item.armor) {\n\t\t\tif (item.resist) itemList[i].entries = pushObject(itemList[i].entries,\"You have resistance to \"+item.resist+\" damage while you wear this armor.\");\n\t\t\tif (item.armor && item.stealth) itemList[i].entries = pushObject(itemList[i].entries,\"The wearer has disadvantage on Stealth (Dexterity) checks.\");\n\t\t\tif (item.type === \"HA\" && item.strength) itemList[i].entries = pushObject(itemList[i].entries,\"If the wearer has a Strength score lower than \" + item.strength + \", their speed is reduced by 10 feet.\");\n\t\t} else if (item.resist) {\n\t\t\tif (item.type === \"P\") itemList[i].entries = pushObject(itemList[i].entries,\"When you drink this potion, you gain resistance to \"+item.resist+\" damage for 1 hour.\");\n\t\t\tif (item.type === \"RG\") itemList[i].entries = pushObject(itemList[i].entries,\"You have resistance to \"+item.resist+\" damage while wearing this ring.\");\n\t\t}\n\t\tif (item.type === \"SCF\") {\n\t\t\tif (item.scfType === \"arcane\") itemList[i].entries = pushObject(itemList[i].entries,\"An arcane focus is a special item designed to channel the power of arcane spells. A sorcerer, warlock, or wizard can use such an item as a spellcasting focus, using it in place of any material component which does not list a cost.\");\n\t\t\tif (item.scfType === \"druid\") itemList[i].entries = pushObject(itemList[i].entries,\"A druid can use such a druidic focus as a spellcasting focus, using it in place of any material component that does not have a cost.\");\n\t\t\tif (item.scfType === \"holy\") {\n\t\t\t\titemList[i].entries = pushObject(itemList[i].entries,\"A holy symbol is a representation of a god or pantheon.\");\n\t\t\t\titemList[i].entries = pushObject(itemList[i].entries,\"A cleric or paladin can use a holy symbol as a spellcasting focus, using it in place of any material components which do not list a cost. To use the symbol in this way, the caster must hold it in hand, wear it visibly, or bear it on a shield.\");\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i < itemList.length; i++) {\n\t\tconst item = itemList[i];\n\t\tif (item.noDisplay) continue;\n\t\tif (itemList[i].type === \"GV\") itemList[i].category = \"Generic Variant\";\n\t\tif (itemList[i].category === undefined) itemList[i].category = \"Other\";\n\t\tif (item.entries === undefined) itemList[i].entries=[];\n\t\tif (item.type && typeList[item.type]) for (let j = 0; j < typeList[item.type].entries.length; j++) itemList[i].entries = pushObject(itemList[i].entries,typeList[item.type].entries[j]);\n\t\tif (item.property) {\n\t\t\tconst properties = item.property.split(\",\");\n\t\t\tfor (let j = 0; j < properties.length; j++) if (propertyList[properties[j]].entries) for (let k = 0; k < propertyList[properties[j]].entries.length; k++) itemList[i].entries = pushObject(itemList[i].entries,propertyList[properties[j]].entries[k]);\n\t\t}\n\t\t//The following could be encoded in JSON, but they depend on more than one JSON property; maybe fix if really bored later\n\t\tif (item.armor) {\n\t\t\tif (item.resist) itemList[i].entries = pushObject(itemList[i].entries,\"You have resistance to \"+item.resist+\" damage while you wear this armor.\");\n\t\t\tif (item.armor && item.stealth) itemList[i].entries = pushObject(itemList[i].entries,\"The wearer has disadvantage on Stealth (Dexterity) checks.\");\n\t\t\tif (item.type === \"HA\" && item.strength) itemList[i].entries = pushObject(itemList[i].entries,\"If the wearer has a Strength score lower than \" + item.strength + \", their speed is reduced by 10 feet.\");\n\t\t} else if (item.resist) {\n\t\t\tif (item.type === \"P\") itemList[i].entries = pushObject(itemList[i].entries,\"When you drink this potion, you gain resistance to \"+item.resist+\" damage for 1 hour.\");\n\t\t\tif (item.type === \"RG\") itemList[i].entries = pushObject(itemList[i].entries,\"You have resistance to \"+item.resist+\" damage while wearing this ring.\");\n\t\t}\n\t\tif (item.type === \"SCF\") {\n\t\t\tif (item.scfType === \"arcane\") itemList[i].entries = pushObject(itemList[i].entries,\"An arcane focus is a special item designed to channel the power of arcane spells. A sorcerer, warlock, or wizard can use such an item as a spellcasting focus, using it in place of any material component which does not list a cost.\");\n\t\t\tif (item.scfType === \"druid\") itemList[i].entries = pushObject(itemList[i].entries,\"A druid can use such a druidic focus as a spellcasting focus, using it in place of any material component that does not have a cost.\");\n\t\t\tif (item.scfType === \"holy\") {\n\t\t\t\titemList[i].entries = pushObject(itemList[i].entries,\"A holy symbol is a representation of a god or pantheon.\");\n\t\t\t\titemList[i].entries = pushObject(itemList[i].entries,\"A cleric or paladin can use a holy symbol as a spellcasting focus, using it in place of any material components which do not list a cost. To use the symbol in this way, the caster must hold it in hand, wear it visibly, or bear it on a shield.\");\n\t\t\t}\n\t\t}\n  }\n  return itemList;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { matches, translate } from '../utils/path.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n\n/**\n * @constructor\n * @implements {Polymer_OptionalMutableData}\n * @extends {PolymerElement}\n * @private\n */\nconst domRepeatBase = OptionalMutableData(PolymerElement);\n\n/**\n * The `<dom-repeat>` element will automatically stamp and binds one instance\n * of template content to each object in a user-provided array.\n * `dom-repeat` accepts an `items` property, and one instance of the template\n * is stamped for each item into the DOM at the location of the `dom-repeat`\n * element.  The `item` property will be set on each instance's binding\n * scope, thus templates should bind to sub-properties of `item`.\n *\n * Example:\n *\n * ```html\n * <dom-module id=\"employee-list\">\n *\n *   <template>\n *\n *     <div> Employee list: </div>\n *     <dom-repeat items=\"{{employees}}\">\n *       <template>\n *         <div>First name: <span>{{item.first}}</span></div>\n *         <div>Last name: <span>{{item.last}}</span></div>\n *       </template>\n *     </dom-repeat>\n *\n *   </template>\n *\n * </dom-module>\n * ```\n *\n * With the following custom element definition:\n *\n * ```js\n * class EmployeeList extends PolymerElement {\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n * }\n * ```\n *\n * Notifications for changes to items sub-properties will be forwarded to template\n * instances, which will update via the normal structured data notification system.\n *\n * Mutations to the `items` array itself should be made using the Array\n * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,\n * `shift`, `unshift`), and template instances will be kept in sync with the\n * data in the array.\n *\n * Events caught by event handlers within the `dom-repeat` template will be\n * decorated with a `model` property, which represents the binding scope for\n * each template instance.  The model should be used to manipulate data on the\n * instance, for example `event.model.set('item.checked', true);`.\n *\n * Alternatively, the model for a template instance for an element stamped by\n * a `dom-repeat` can be obtained using the `modelForElement` API on the\n * `dom-repeat` that stamped it, for example\n * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n * This may be useful for manipulating instance data of event targets obtained\n * by event handlers on parents of the `dom-repeat` (event delegation).\n *\n * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n * `filter` and/or `sort` property.  This may be a string that names a function on\n * the host, or a function may be assigned to the property directly.  The functions\n * should implemented following the standard `Array` filter/sort API.\n *\n * In order to re-run the filter or sort functions based on changes to sub-fields\n * of `items`, the `observe` property may be set as a space-separated list of\n * `item` sub-fields that should cause a re-filter/sort when modified.  If\n * the filter or sort function depends on properties not contained in `items`,\n * the user should observe changes to those properties and call `render` to update\n * the view based on the dependency change.\n *\n * For example, for an `dom-repeat` with a filter of the following:\n *\n * ```js\n * isEngineer(item) {\n *   return item.type == 'engineer' || item.manager.type == 'engineer';\n * }\n * ```\n *\n * Then the `observe` property should be configured as follows:\n *\n * ```html\n * <dom-repeat items=\"{{employees}}\" filter=\"isEngineer\" observe=\"type manager.type\">\n * ```\n *\n * @customElement\n * @polymer\n * @extends {domRepeatBase}\n * @appliesMixin OptionalMutableData\n * @summary Custom element for stamping instance of a template bound to\n *   items in an array.\n */\nexport class DomRepeat extends domRepeatBase {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-repeat'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n    return {\n\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the sorted and filtered list of rendered items.\n       * Note, for the index in the `this.items` array, use the value of the\n       * `itemsIndexAs` property.\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the `this.items` array. Note, for the index of\n       * this instance in the sorted and filtered list of rendered items,\n       * use the value of the `indexAs` property.\n       */\n      itemsIndexAs: {\n        type: String,\n        value: 'itemsIndex'\n      },\n\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '__sortChanged'\n      },\n\n      /**\n       * A function that can be used to filter items out of the view.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.filter`.\n       * Using a filter function has no effect on the underlying `items` array.\n       */\n      filter: {\n        type: Function,\n        observer: '__filterChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '__observeChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time in ms after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffling of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: true,\n        readOnly: true\n      },\n\n      /**\n       * Defines an initial count of template instances to render after setting\n       * the `items` array, before the next paint, and puts the `dom-repeat`\n       * into \"chunking mode\".  The remaining items will be created and rendered\n       * incrementally at each animation frame therof until all instances have\n       * been rendered.\n       */\n      initialCount: {\n        type: Number,\n        observer: '__initializeChunking'\n      },\n\n      /**\n       * When `initialCount` is used, this property defines a frame rate (in\n       * fps) to target by throttling the number of instances rendered each\n       * frame to not exceed the budget for the target frame rate.  The\n       * framerate is effectively the number of `requestAnimationFrame`s that\n       * it tries to allow to actually fire in a given second. It does this\n       * by measuring the time between `rAF`s and continuously adjusting the\n       * number of items created each `rAF` to maintain the target framerate.\n       * Setting this to a higher number allows lower latency and higher\n       * throughput for event handlers and other tasks, but results in a\n       * longer time for the remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n\n      _targetFrameTime: {\n        type: Number,\n        computed: '__computeFrameTime(targetFramerate)'\n      }\n\n    };\n\n  }\n\n  static get observers() {\n    return [ '__itemsChanged(items.*)' ];\n  }\n\n  constructor() {\n    super();\n    this.__instances = [];\n    this.__limit = Infinity;\n    this.__pool = [];\n    this.__renderDebouncer = null;\n    this.__itemsIdxToInstIdx = {};\n    this.__chunkCount = null;\n    this.__lastChunkTime = null;\n    this.__sortFn = null;\n    this.__filterFn = null;\n    this.__observePaths = null;\n    /** @type {?function(new:TemplateInstanceBase, Object=)} */\n    this.__ctor = null;\n    this.__isDetached = true;\n    this.template = null;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__isDetached = true;\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__detachInstance(i);\n    }\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    // only perform attachment if the element was previously detached.\n    if (this.__isDetached) {\n      this.__isDetached = false;\n      let wrappedParent = wrap(wrap(this).parentNode);\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__attachInstance(i, wrappedParent);\n      }\n    }\n  }\n\n  __ensureTemplatized() {\n    // Templatizing (generating the instance constructor) needs to wait\n    // until ready, since won't have its template content handed back to\n    // it until then\n    if (!this.__ctor) {\n      let template = this.template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n      if (!template) {\n        // // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (this.querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-repeat requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return false;\n      }\n      // Template instance props that should be excluded from forwarding\n      let instanceProps = {};\n      instanceProps[this.as] = true;\n      instanceProps[this.indexAs] = true;\n      instanceProps[this.itemsIndexAs] = true;\n      this.__ctor = templatize(template, this, {\n        mutableData: this.mutableData,\n        parentModel: true,\n        instanceProps: instanceProps,\n        /**\n         * @this {DomRepeat}\n         * @param {string} prop Property to set\n         * @param {*} value Value to set property to\n         */\n        forwardHostProp: function(prop, value) {\n          let i$ = this.__instances;\n          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n            inst.forwardHostProp(prop, value);\n          }\n        },\n        /**\n         * @this {DomRepeat}\n         * @param {Object} inst Instance to notify\n         * @param {string} prop Property to notify\n         * @param {*} value Value to notify\n         */\n        notifyInstanceProp: function(inst, prop, value) {\n          if (matches(this.as, prop)) {\n            let idx = inst[this.itemsIndexAs];\n            if (prop == this.as) {\n              this.items[idx] = value;\n            }\n            let path = translate(this.as, `${JSCompiler_renameProperty('items', this)}.${idx}`, prop);\n            this.notifyPath(path, value);\n          }\n        }\n      });\n    }\n    return true;\n  }\n\n  __getMethodHost() {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    return this.__dataHost._methodHost || this.__dataHost;\n  }\n\n  __functionFromPropertyValue(functionOrMethodName) {\n    if (typeof functionOrMethodName === 'string') {\n      let methodName = functionOrMethodName;\n      let obj = this.__getMethodHost();\n      return function() { return obj[methodName].apply(obj, arguments); };\n    }\n\n    return functionOrMethodName;\n  }\n\n  __sortChanged(sort) {\n    this.__sortFn = this.__functionFromPropertyValue(sort);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __filterChanged(filter) {\n    this.__filterFn = this.__functionFromPropertyValue(filter);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __computeFrameTime(rate) {\n    return Math.ceil(1000/rate);\n  }\n\n  __initializeChunking() {\n    if (this.initialCount) {\n      this.__limit = this.initialCount;\n      this.__chunkCount = this.initialCount;\n      this.__lastChunkTime = performance.now();\n    }\n  }\n\n  __tryRenderChunk() {\n    // Debounced so that multiple calls through `_render` between animation\n    // frames only queue one new rAF (e.g. array mutation & chunked render)\n    if (this.items && this.__limit < this.items.length) {\n      this.__debounceRender(this.__requestRenderChunk);\n    }\n  }\n\n  __requestRenderChunk() {\n    requestAnimationFrame(()=>this.__renderChunk());\n  }\n\n  __renderChunk() {\n    // Simple auto chunkSize throttling algorithm based on feedback loop:\n    // measure actual time between frames and scale chunk count by ratio\n    // of target/actual frame time\n    let currChunkTime = performance.now();\n    let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);\n    this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n    this.__limit += this.__chunkCount;\n    this.__lastChunkTime = currChunkTime;\n    this.__debounceRender(this.__render);\n  }\n\n  __observeChanged() {\n    this.__observePaths = this.observe &&\n      this.observe.replace('.*', '.').split(' ');\n  }\n\n  __itemsChanged(change) {\n    if (this.items && !Array.isArray(this.items)) {\n      console.warn('dom-repeat expected array for `items`, found', this.items);\n    }\n    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n    // path to that instance synchronously (returns false for non-item paths)\n    if (!this.__handleItemPath(change.path, change.value)) {\n      // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n      // so queue a full refresh\n      this.__initializeChunking();\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  __handleObservedPaths(path) {\n    // Handle cases where path changes should cause a re-sort/filter\n    if (this.__sortFn || this.__filterFn) {\n      if (!path) {\n        // Always re-render if the item itself changed\n        this.__debounceRender(this.__render, this.delay);\n      } else if (this.__observePaths) {\n        // Otherwise, re-render if the path changed matches an observed path\n        let paths = this.__observePaths;\n        for (let i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__debounceRender(this.__render, this.delay);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {function(this:DomRepeat)} fn Function to debounce.\n   * @param {number=} delay Delay in ms to debounce by.\n   */\n  __debounceRender(fn, delay = 0) {\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , delay > 0 ? timeOut.after(delay) : microTask\n        , fn.bind(this));\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   * @return {void}\n   */\n  render() {\n    // Queue this repeater, then flush all in order\n    this.__debounceRender(this.__render);\n    flush();\n  }\n\n  __render() {\n    if (!this.__ensureTemplatized()) {\n      // No template found yet\n      return;\n    }\n    this.__applyFullRefresh();\n    // Reset the pool\n    // TODO(kschaaf): Reuse pool across turns and nested templates\n    // Now that objects/arrays are re-evaluated when set, we can safely\n    // reuse pooled instances across turns, however we still need to decide\n    // semantics regarding how long to hold, how many to hold, etc.\n    this.__pool.length = 0;\n    // Set rendered item count\n    this._setRenderedItemCount(this.__instances.length);\n    // Notify users\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n    // Check to see if we need to render more items\n    this.__tryRenderChunk();\n  }\n\n  __applyFullRefresh() {\n    let items = this.items || [];\n    let isntIdxToItemsIdx = new Array(items.length);\n    for (let i=0; i<items.length; i++) {\n      isntIdxToItemsIdx[i] = i;\n    }\n    // Apply user filter\n    if (this.__filterFn) {\n      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n        this.__filterFn(items[i], idx, array));\n    }\n    // Apply user sort\n    if (this.__sortFn) {\n      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n    }\n    // items->inst map kept for item path forwarding\n    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n    let instIdx = 0;\n    // Generate instances and assign items\n    const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);\n    for (; instIdx<limit; instIdx++) {\n      let inst = this.__instances[instIdx];\n      let itemIdx = isntIdxToItemsIdx[instIdx];\n      let item = items[itemIdx];\n      itemsIdxToInstIdx[itemIdx] = instIdx;\n      if (inst) {\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        this.__insertInstance(item, instIdx, itemIdx);\n      }\n    }\n    // Remove any extra instances from previous state\n    for (let i=this.__instances.length-1; i>=instIdx; i--) {\n      this.__detachAndRemoveInstance(i);\n    }\n  }\n\n  __detachInstance(idx) {\n    let inst = this.__instances[idx];\n    const wrappedRoot = wrap(inst.root);\n    for (let i=0; i<inst.children.length; i++) {\n      let el = inst.children[i];\n      wrappedRoot.appendChild(el);\n    }\n    return inst;\n  }\n\n  __attachInstance(idx, parent) {\n    let inst = this.__instances[idx];\n    // Note, this is pre-wrapped as an optimization\n    parent.insertBefore(inst.root, this);\n  }\n\n  __detachAndRemoveInstance(idx) {\n    let inst = this.__detachInstance(idx);\n    if (inst) {\n      this.__pool.push(inst);\n    }\n    this.__instances.splice(idx, 1);\n  }\n\n  __stampInstance(item, instIdx, itemIdx) {\n    let model = {};\n    model[this.as] = item;\n    model[this.indexAs] = instIdx;\n    model[this.itemsIndexAs] = itemIdx;\n    return new this.__ctor(model);\n  }\n\n  __insertInstance(item, instIdx, itemIdx) {\n    let inst = this.__pool.pop();\n    if (inst) {\n      // TODO(kschaaf): If the pool is shared across turns, hostProps\n      // need to be re-set to reused instances in addition to item\n      inst._setPendingProperty(this.as, item);\n      inst._setPendingProperty(this.indexAs, instIdx);\n      inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n      inst._flushProperties();\n    } else {\n      inst = this.__stampInstance(item, instIdx, itemIdx);\n    }\n    let beforeRow = this.__instances[instIdx + 1];\n    let beforeNode = beforeRow ? beforeRow.children[0] : this;\n    wrap(wrap(this).parentNode).insertBefore(inst.root, beforeNode);\n    this.__instances[instIdx] = inst;\n    return inst;\n  }\n\n  // Implements extension point from Templatize mixin\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hidden Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hidden) {\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__instances[i]._showHideChildren(hidden);\n    }\n  }\n\n  // Called as a side effect of a host items.<key>.<path> path change,\n  // responsible for notifying item.<path> changes to inst for key\n  __handleItemPath(path, value) {\n    let itemsPath = path.slice(6); // 'items.'.length == 6\n    let dot = itemsPath.indexOf('.');\n    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n    // If path was index into array...\n    if (itemsIdx == parseInt(itemsIdx, 10)) {\n      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n      // If the path is observed, it will trigger a full refresh\n      this.__handleObservedPaths(itemSubPath);\n      // Note, even if a rull refresh is triggered, always do the path\n      // notification because unless mutableData is used for dom-repeat\n      // and all elements in the instance subtree, a full refresh may\n      // not trigger the proper update.\n      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n      let inst = this.__instances[instIdx];\n      if (inst) {\n        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n        // This is effectively `notifyPath`, but avoids some of the overhead\n        // of the public API\n        inst._setPendingPropertyOrPath(itemPath, value, false, true);\n        inst._flushProperties();\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Returns the item associated with a given element stamped by\n   * this `dom-repeat`.\n   *\n   * Note, to modify sub-properties of the item,\n   * `modelForElement(el).set('item.<sub-prop>', value)`\n   * should be used.\n   *\n   * @param {!HTMLElement} el Element for which to return the item.\n   * @return {*} Item associated with the element.\n   */\n  itemForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.as];\n  }\n\n  /**\n   * Returns the inst index for a given element stamped by this `dom-repeat`.\n   * If `sort` is provided, the index will reflect the sorted order (rather\n   * than the original array order).\n   *\n   * @param {!HTMLElement} el Element for which to return the index.\n   * @return {?number} Row index associated with the element (note this may\n   *   not correspond to the array index if a user `sort` is applied).\n   */\n  indexForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.indexAs];\n  }\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model\n   * should be used to manipulate data associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @param {!HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   */\n  modelForElement(el) {\n    return modelForElement(this.template, el);\n  }\n\n}\n\ncustomElements.define(DomRepeat.is, DomRepeat);\n"],"sourceRoot":""}