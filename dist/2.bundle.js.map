{"version":3,"sources":["webpack:///./node_modules/@polymer/polymer/lib/mixins/mutable-data.js","webpack:///./node_modules/@polymer/polymer/lib/utils/templatize.js","webpack:///./node_modules/@polymer/polymer/lib/utils/debounce.js","webpack:///./node_modules/@polymer/polymer/lib/utils/hide-template-controls.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-repeat.js","webpack:///./node_modules/@polymer/polymer/lib/utils/flush.js"],"names":["mutablePropertyChange","inst","property","value","old","mutableData","isObject","__dataTemp","shouldChange","MutableData","superClass","this","OptionalMutableData","Boolean","_mutablePropertyChange","newInstance","HTMLTemplateElementExtension","prototype","Object","create","HTMLTemplateElement","constructor","writable","DataTemplate","MutableDataTemplate","templateInstanceBase","props","super","_configureProperties","root","_stampTemplate","__dataHost","children","n","firstChild","nextSibling","push","__templatizeInstance","__templatizeOwner","__hideTemplateChildren__","_showHideChildren","options","__templatizeOptions","instanceProps","_enableProperties","forwardHostProp","hprop","__hostProps","_setPendingProperty","iprop","prop","_setPendingPropertyOrPath","_enqueueClient","node","eventName","handler","_methodHost","parentModel","_addEventListenerToNode","e","model","templateHost","hide","c","i","length","nodeType","Node","TEXT_NODE","__polymerTextContent__","textContent","localName","__polymerReplaced__","document","createComment","wrap","parentNode","replaceChild","replace","style","__polymerDisplay__","display","_setUnmanagedPropertyToNode","__parentModel","event","MutableTemplateInstanceBase","findMethodHost","template","createTemplatizerClass","templateInfo","templatizerBase","templatize","mixin","klass","_bindTemplate","hostProps","userNotifyInstanceProp","notifyInstanceProp","_addPropertyEffect","PROPERTY_EFFECT_TYPES","NOTIFY","fn","createNotifyInstancePropEffect","hasHostProps","addNotifyEffects","addPropagateEffects","userForwardHostProp","templatizeTemplateClass","templatizedBase","PROPAGATE","createForwardHostPropEffect","_createNotifyingProperty","setPrototypeOf","upgradeTemplate","__dataProto","assign","__data","__dataPending","__dataOld","hostProp","call","substring","instProp","owner","Error","_parseTemplate","baseClass","templatizeInstanceClass","Debouncer","_asyncModule","_callback","_timer","asyncModule","callback","run","debouncerQueue","delete","isActive","_cancelAsync","cancel","debouncer","setConfig","Set","flushDebouncers","didFlush","size","forEach","flush","setTimeout","elementsHidden","domRepeatBase","items","type","Array","as","String","indexAs","itemsIndexAs","sort","Function","observer","filter","observe","delay","Number","renderedItemCount","notify","readOnly","initialCount","targetFramerate","_targetFrameTime","computed","__instances","__limit","Infinity","__pool","__renderDebouncer","__itemsIdxToInstIdx","__chunkCount","__lastChunkTime","__sortFn","__filterFn","__observePaths","__ctor","__isDetached","disconnectedCallback","__detachInstance","connectedCallback","createElement","head","appendChild","hideElementsGlobally","wrappedParent","__attachInstance","querySelector","MutationObserver","disconnect","__render","childList","i$","idx","path","JSCompiler_renameProperty","notifyPath","functionOrMethodName","methodName","obj","__getMethodHost","apply","arguments","__functionFromPropertyValue","__debounceRender","rate","Math","ceil","performance","now","__requestRenderChunk","requestAnimationFrame","__renderChunk","currChunkTime","ratio","round","split","change","isArray","console","warn","__handleItemPath","__initializeChunking","paths","indexOf","debounce","after","bind","add","shadyDOM","debouncers","window","ShadyDOM","ShadyCSS","ScopingShim","__ensureTemplatized","__applyFullRefresh","_setRenderedItemCount","dispatchEvent","CustomEvent","bubbles","composed","__tryRenderChunk","isntIdxToItemsIdx","array","a","b","itemsIdxToInstIdx","instIdx","limit","min","itemIdx","item","_flushProperties","__insertInstance","__detachAndRemoveInstance","wrappedRoot","el","parent","insertBefore","splice","pop","__stampInstance","beforeRow","beforeNode","hidden","itemsPath","slice","dot","itemsIdx","parseInt","itemSubPath","__handleObservedPaths","itemPath","instance","modelForElement","customElements","define","is"],"mappings":"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","file":"2.bundle.js","sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// Common implementation for mixin & behavior\nfunction mutablePropertyChange(inst, property, value, old, mutableData) {\n  let isObject;\n  if (mutableData) {\n    isObject = (typeof value === 'object' && value !== null);\n    // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n    if (isObject) {\n      old = inst.__dataTemp[property];\n    }\n  }\n  // Strict equality check, but return false for NaN===NaN\n  let shouldChange = (old !== value && (old === old || value === value));\n  // Objects are stored in temporary cache (cleared at end of\n  // turn), which is used for dirty-checking\n  if (isObject && shouldChange) {\n    inst.__dataTemp[property] = value;\n  }\n  return shouldChange;\n}\n\n/**\n * Element class mixin to skip strict dirty-checking for objects and arrays\n * (always consider them to be \"dirty\"), for use on elements utilizing\n * `PropertyEffects`\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will cause Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must apply this mixin or enable the\n * `OptionalMutableData` mixin.\n *\n * In order to make the dirty check strategy configurable, see\n * `OptionalMutableData`.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse as opposed to using strict dirty checking with immutable\n * patterns or Polymer's path notification API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to skip strict dirty-checking for objects\n *   and arrays\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const MutableData = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_MutableData}\n   */\n  class MutableData extends superClass {\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n\n  }\n\n  return MutableData;\n\n});\n\n/**\n * Element class mixin to add the optional ability to skip strict\n * dirty-checking for objects and arrays (always consider them to be\n * \"dirty\") by setting a `mutable-data` attribute on an element instance.\n *\n * By default, `PropertyEffects` performs strict dirty checking on\n * objects, which means that any deep modifications to an object or array will\n * not be propagated unless \"immutable\" data patterns are used (i.e. all object\n * references from the root to the mutation were changed).\n *\n * Polymer also provides a proprietary data mutation and path notification API\n * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient\n * mutation and notification of deep changes in an object graph to all elements\n * bound to the same object graph.\n *\n * In cases where neither immutable patterns nor the data mutation API can be\n * used, applying this mixin will allow Polymer to skip dirty checking for\n * objects and arrays (always consider them to be \"dirty\").  This allows a\n * user to make a deep modification to a bound object graph, and then either\n * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`\n * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all\n * elements that wish to be updated based on deep mutations must apply this\n * mixin or otherwise skip strict dirty checking for objects/arrays.\n * Specifically, any elements in the binding tree between the source of a\n * mutation and the consumption of it must enable this mixin or apply the\n * `MutableData` mixin.\n *\n * While this mixin adds the ability to forgo Object/Array dirty checking,\n * the `mutableData` flag defaults to false and must be set on the instance.\n *\n * Note, the performance characteristics of propagating large object graphs\n * will be worse by relying on `mutableData: true` as opposed to using\n * strict dirty checking with immutable patterns or Polymer's path notification\n * API.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin to optionally skip strict dirty-checking\n *   for objects and arrays\n */\nexport const OptionalMutableData = dedupingMixin(superClass => {\n\n  /**\n   * @mixinClass\n   * @polymer\n   * @implements {Polymer_OptionalMutableData}\n   */\n  class OptionalMutableData extends superClass {\n\n    /** @nocollapse */\n    static get properties() {\n      return {\n        /**\n         * Instance-level flag for configuring the dirty-checking strategy\n         * for this element.  When true, Objects and Arrays will skip dirty\n         * checking, otherwise strict equality checking will be used.\n         */\n        mutableData: Boolean\n      };\n    }\n\n    /**\n     * Overrides `PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * When `this.mutableData` is true on this instance, this method\n     * pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  }\n\n  return OptionalMutableData;\n\n});\n\n// Export for use by legacy behavior\nMutableData._mutablePropertyChange = mutablePropertyChange;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(\n    // This cast shouldn't be neccessary, but Closure doesn't understand that\n    // \"class {}\" is a constructor function.\n    /** @type {function(new:Object)} */(class {}));\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = [];\n    /** @suppress {invalidCasts} */\n    this.children = /** @type {!NodeList} */ (children);\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner &&\n      this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    let c = this.children;\n    for (let i=0; i<c.length; i++) {\n      let n = c[i];\n      // Ignore non-changes\n      if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n        if (n.nodeType === Node.TEXT_NODE) {\n          if (hide) {\n            n.__polymerTextContent__ = n.textContent;\n            n.textContent = '';\n          } else {\n            n.textContent = n.__polymerTextContent__;\n          }\n        // remove and replace slot\n        } else if (n.localName === 'slot') {\n          if (hide) {\n            n.__polymerReplaced__ = document.createComment('hidden-slot');\n            wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n          } else {\n            const replace = n.__polymerReplaced__;\n            if (replace) {\n              wrap(wrap(replace).parentNode).replaceChild(n, replace);\n            }\n          }\n        }\n\n        else if (n.style) {\n          if (hide) {\n            n.__polymerDisplay__ = n.style.display;\n            n.style.display = 'none';\n          } else {\n            n.style.display = n.__polymerDisplay__;\n          }\n        }\n      }\n      n.__hideTemplateChildren__ = hide;\n      if (n._showHideChildren) {\n        n._showHideChildren(hide);\n      }\n    }\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   * @override\n   */\n   dispatchEvent(event) { // eslint-disable-line no-unused-vars\n     return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(\n    // This cast shouldn't be necessary, but Closure doesn't seem to understand\n    // this constructor.\n    /** @type {function(new:TemplateInstanceBase)} */(TemplateInstanceBase));\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase { };\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * Adds propagate effects from the template to the template instance for\n * properties that the host binds to the template using the `_host_` prefix.\n * \n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(template, templateInfo, options) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp && templateInfo.hasHostProps) {\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      /**\n       * @constructor\n       * @extends {DataTemplate}\n       */\n      let templatizedBase = options.mutableData ? MutableDataTemplate : DataTemplate;\n      /** @private */\n      klass = templateInfo.templatizeTemplateClass =\n        class TemplatizedTemplate extends templatizedBase {};\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n    }\n    upgradeTemplate(template, klass);\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (template.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(template.__data, template.__dataProto);\n    }\n    // Clear any pending data for performance\n    template.__dataTemp = {};\n    template.__dataPending = null;\n    template.__dataOld = null;\n    template._enableProperties();\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      // As we're iterating hostProps in this function, note whether\n      // there were any, for an optimization in addPropagateEffects\n      if (!templateInfo.hasHostProps) {\n        templateInfo.hasHostProps = true;\n      }\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound\n *   to the template provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */(options || {});\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = findMethodHost(template);\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */ (template);\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */ (owner);\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign\n  return klass;\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLTemplateElement} template The model will be returned for\n *   elements stamped from this template\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if ((model = node.__templatizeInstance)) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\n\nexport { TemplateInstanceBase };\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport './mixin.js';\nimport './async.js';\n\n/**\n * @summary Collapse multiple callbacks into one invocation after a timer.\n */\nexport class Debouncer {\n  constructor() {\n    this._asyncModule = null;\n    this._callback = null;\n    this._timer = null;\n  }\n  /**\n   * Sets the scheduler; that is, a module with the Async interface,\n   * a callback and optional arguments to be passed to the run function\n   * from the async module.\n   *\n   * @param {!AsyncInterface} asyncModule Object with Async interface.\n   * @param {function()} callback Callback to run.\n   * @return {void}\n   */\n  setConfig(asyncModule, callback) {\n    this._asyncModule = asyncModule;\n    this._callback = callback;\n    this._timer = this._asyncModule.run(() => {\n      this._timer = null;\n      debouncerQueue.delete(this);\n      this._callback();\n    });\n  }\n  /**\n   * Cancels an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  cancel() {\n    if (this.isActive()) {\n      this._cancelAsync();\n      // Canceling a debouncer removes its spot from the flush queue,\n      // so if a debouncer is manually canceled and re-debounced, it\n      // will reset its flush order (this is a very minor difference from 1.x)\n      // Re-debouncing via the `debounce` API retains the 1.x FIFO flush order\n      debouncerQueue.delete(this);\n    }\n  }\n  /**\n   * Cancels a debouncer's async callback.\n   *\n   * @return {void}\n   */\n  _cancelAsync() {\n    if (this.isActive()) {\n      this._asyncModule.cancel(/** @type {number} */(this._timer));\n      this._timer = null;\n    }\n  }\n  /**\n   * Flushes an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  flush() {\n    if (this.isActive()) {\n      this.cancel();\n      this._callback();\n    }\n  }\n  /**\n   * Returns true if the debouncer is active.\n   *\n   * @return {boolean} True if active.\n   */\n  isActive() {\n    return this._timer != null;\n  }\n  /**\n   * Creates a debouncer if no debouncer is passed as a parameter\n   * or it cancels an active debouncer otherwise. The following\n   * example shows how a debouncer can be called multiple times within a\n   * microtask and \"debounced\" such that the provided callback function is\n   * called once. Add this method to a custom element:\n   *\n   * ```js\n   * import {microTask} from '@polymer/polymer/lib/utils/async.js';\n   * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';\n   * // ...\n   *\n   * _debounceWork() {\n   *   this._debounceJob = Debouncer.debounce(this._debounceJob,\n   *       microTask, () => this._doWork());\n   * }\n   * ```\n   *\n   * If the `_debounceWork` method is called multiple times within the same\n   * microtask, the `_doWork` function will be called only once at the next\n   * microtask checkpoint.\n   *\n   * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n   * this with a debouncer, you can use `enqueueDebouncer` and\n   * `flush`. For example, extend the above example by adding\n   * `enqueueDebouncer(this._debounceJob)` at the end of the\n   * `_debounceWork` method. Then in a test, call `flush` to ensure\n   * the debouncer has completed.\n   *\n   * @param {Debouncer?} debouncer Debouncer object.\n   * @param {!AsyncInterface} asyncModule Object with Async interface\n   * @param {function()} callback Callback to run.\n   * @return {!Debouncer} Returns a debouncer object.\n   */\n  static debounce(debouncer, asyncModule, callback) {\n    if (debouncer instanceof Debouncer) {\n      // Cancel the async callback, but leave in debouncerQueue if it was\n      // enqueued, to maintain 1.x flush order\n      debouncer._cancelAsync();\n    } else {\n      debouncer = new Debouncer();\n    }\n    debouncer.setConfig(asyncModule, callback);\n    return debouncer;\n  }\n}\n\nlet debouncerQueue = new Set();\n\n/**\n * Adds a `Debouncer` to a list of globally flushable tasks.\n *\n * @param {!Debouncer} debouncer Debouncer to enqueue\n * @return {void}\n */\nexport const enqueueDebouncer = function(debouncer) {\n  debouncerQueue.add(debouncer);\n};\n\n/**\n * Flushes any enqueued debouncers\n *\n * @return {boolean} Returns whether any debouncers were flushed\n */\nexport const flushDebouncers = function() {\n  const didFlush = Boolean(debouncerQueue.size);\n  // If new debouncers are added while flushing, Set.forEach will ensure\n  // newly added ones are also flushed\n  debouncerQueue.forEach(debouncer => {\n    try {\n      debouncer.flush();\n    } catch(e) {\n      setTimeout(() => {\n        throw e;\n      });\n    }\n  });\n  return didFlush;\n};","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * Module to hide `<dom-bind>`, `<dom-if>`, and `<dom-repeat>` elements\n * optimally in ShadyDOM\n */\n\nimport {legacyOptimizations, useShadow} from './settings.js';\n\nlet elementsHidden = false;\n\n/**\n * @return {boolean} True if elements will be hidden globally\n */\nexport function hideElementsGlobally() {\n  if (legacyOptimizations && !useShadow) {\n    if (!elementsHidden) {\n      elementsHidden = true;\n      const style = document.createElement('style');\n      style.textContent = 'dom-bind,dom-if,dom-repeat{display:none;}';\n      document.head.appendChild(style);\n    }\n    return true;\n  }\n  return false;\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { matches, translate } from '../utils/path.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n\n/**\n * @constructor\n * @implements {Polymer_OptionalMutableData}\n * @extends {PolymerElement}\n * @private\n */\nconst domRepeatBase = OptionalMutableData(PolymerElement);\n\n/**\n * The `<dom-repeat>` element will automatically stamp and binds one instance\n * of template content to each object in a user-provided array.\n * `dom-repeat` accepts an `items` property, and one instance of the template\n * is stamped for each item into the DOM at the location of the `dom-repeat`\n * element.  The `item` property will be set on each instance's binding\n * scope, thus templates should bind to sub-properties of `item`.\n *\n * Example:\n *\n * ```html\n * <dom-module id=\"employee-list\">\n *\n *   <template>\n *\n *     <div> Employee list: </div>\n *     <dom-repeat items=\"{{employees}}\">\n *       <template>\n *         <div>First name: <span>{{item.first}}</span></div>\n *         <div>Last name: <span>{{item.last}}</span></div>\n *       </template>\n *     </dom-repeat>\n *\n *   </template>\n *\n * </dom-module>\n * ```\n *\n * With the following custom element definition:\n *\n * ```js\n * class EmployeeList extends PolymerElement {\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n * }\n * ```\n *\n * Notifications for changes to items sub-properties will be forwarded to template\n * instances, which will update via the normal structured data notification system.\n *\n * Mutations to the `items` array itself should be made using the Array\n * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,\n * `shift`, `unshift`), and template instances will be kept in sync with the\n * data in the array.\n *\n * Events caught by event handlers within the `dom-repeat` template will be\n * decorated with a `model` property, which represents the binding scope for\n * each template instance.  The model should be used to manipulate data on the\n * instance, for example `event.model.set('item.checked', true);`.\n *\n * Alternatively, the model for a template instance for an element stamped by\n * a `dom-repeat` can be obtained using the `modelForElement` API on the\n * `dom-repeat` that stamped it, for example\n * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n * This may be useful for manipulating instance data of event targets obtained\n * by event handlers on parents of the `dom-repeat` (event delegation).\n *\n * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n * `filter` and/or `sort` property.  This may be a string that names a function on\n * the host, or a function may be assigned to the property directly.  The functions\n * should implemented following the standard `Array` filter/sort API.\n *\n * In order to re-run the filter or sort functions based on changes to sub-fields\n * of `items`, the `observe` property may be set as a space-separated list of\n * `item` sub-fields that should cause a re-filter/sort when modified.  If\n * the filter or sort function depends on properties not contained in `items`,\n * the user should observe changes to those properties and call `render` to update\n * the view based on the dependency change.\n *\n * For example, for an `dom-repeat` with a filter of the following:\n *\n * ```js\n * isEngineer(item) {\n *   return item.type == 'engineer' || item.manager.type == 'engineer';\n * }\n * ```\n *\n * Then the `observe` property should be configured as follows:\n *\n * ```html\n * <dom-repeat items=\"{{employees}}\" filter=\"isEngineer\" observe=\"type manager.type\">\n * ```\n *\n * @customElement\n * @polymer\n * @extends {domRepeatBase}\n * @appliesMixin OptionalMutableData\n * @summary Custom element for stamping instance of a template bound to\n *   items in an array.\n */\nexport class DomRepeat extends domRepeatBase {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-repeat'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n    return {\n\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the sorted and filtered list of rendered items.\n       * Note, for the index in the `this.items` array, use the value of the\n       * `itemsIndexAs` property.\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the `this.items` array. Note, for the index of\n       * this instance in the sorted and filtered list of rendered items,\n       * use the value of the `indexAs` property.\n       */\n      itemsIndexAs: {\n        type: String,\n        value: 'itemsIndex'\n      },\n\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '__sortChanged'\n      },\n\n      /**\n       * A function that can be used to filter items out of the view.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.filter`.\n       * Using a filter function has no effect on the underlying `items` array.\n       */\n      filter: {\n        type: Function,\n        observer: '__filterChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '__observeChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time in ms after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffling of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: true,\n        readOnly: true\n      },\n\n      /**\n       * Defines an initial count of template instances to render after setting\n       * the `items` array, before the next paint, and puts the `dom-repeat`\n       * into \"chunking mode\".  The remaining items will be created and rendered\n       * incrementally at each animation frame therof until all instances have\n       * been rendered.\n       */\n      initialCount: {\n        type: Number,\n        observer: '__initializeChunking'\n      },\n\n      /**\n       * When `initialCount` is used, this property defines a frame rate (in\n       * fps) to target by throttling the number of instances rendered each\n       * frame to not exceed the budget for the target frame rate.  The\n       * framerate is effectively the number of `requestAnimationFrame`s that\n       * it tries to allow to actually fire in a given second. It does this\n       * by measuring the time between `rAF`s and continuously adjusting the\n       * number of items created each `rAF` to maintain the target framerate.\n       * Setting this to a higher number allows lower latency and higher\n       * throughput for event handlers and other tasks, but results in a\n       * longer time for the remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n\n      _targetFrameTime: {\n        type: Number,\n        computed: '__computeFrameTime(targetFramerate)'\n      }\n\n    };\n\n  }\n\n  static get observers() {\n    return [ '__itemsChanged(items.*)' ];\n  }\n\n  constructor() {\n    super();\n    this.__instances = [];\n    this.__limit = Infinity;\n    this.__pool = [];\n    this.__renderDebouncer = null;\n    this.__itemsIdxToInstIdx = {};\n    this.__chunkCount = null;\n    this.__lastChunkTime = null;\n    this.__sortFn = null;\n    this.__filterFn = null;\n    this.__observePaths = null;\n    /** @type {?function(new:TemplateInstanceBase, Object=)} */\n    this.__ctor = null;\n    this.__isDetached = true;\n    this.template = null;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__isDetached = true;\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__detachInstance(i);\n    }\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    // only perform attachment if the element was previously detached.\n    if (this.__isDetached) {\n      this.__isDetached = false;\n      let wrappedParent = wrap(wrap(this).parentNode);\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__attachInstance(i, wrappedParent);\n      }\n    }\n  }\n\n  __ensureTemplatized() {\n    // Templatizing (generating the instance constructor) needs to wait\n    // until ready, since won't have its template content handed back to\n    // it until then\n    if (!this.__ctor) {\n      let template = this.template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n      if (!template) {\n        // // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (this.querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-repeat requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return false;\n      }\n      // Template instance props that should be excluded from forwarding\n      let instanceProps = {};\n      instanceProps[this.as] = true;\n      instanceProps[this.indexAs] = true;\n      instanceProps[this.itemsIndexAs] = true;\n      this.__ctor = templatize(template, this, {\n        mutableData: this.mutableData,\n        parentModel: true,\n        instanceProps: instanceProps,\n        /**\n         * @this {DomRepeat}\n         * @param {string} prop Property to set\n         * @param {*} value Value to set property to\n         */\n        forwardHostProp: function(prop, value) {\n          let i$ = this.__instances;\n          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n            inst.forwardHostProp(prop, value);\n          }\n        },\n        /**\n         * @this {DomRepeat}\n         * @param {Object} inst Instance to notify\n         * @param {string} prop Property to notify\n         * @param {*} value Value to notify\n         */\n        notifyInstanceProp: function(inst, prop, value) {\n          if (matches(this.as, prop)) {\n            let idx = inst[this.itemsIndexAs];\n            if (prop == this.as) {\n              this.items[idx] = value;\n            }\n            let path = translate(this.as, `${JSCompiler_renameProperty('items', this)}.${idx}`, prop);\n            this.notifyPath(path, value);\n          }\n        }\n      });\n    }\n    return true;\n  }\n\n  __getMethodHost() {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    return this.__dataHost._methodHost || this.__dataHost;\n  }\n\n  __functionFromPropertyValue(functionOrMethodName) {\n    if (typeof functionOrMethodName === 'string') {\n      let methodName = functionOrMethodName;\n      let obj = this.__getMethodHost();\n      return function() { return obj[methodName].apply(obj, arguments); };\n    }\n\n    return functionOrMethodName;\n  }\n\n  __sortChanged(sort) {\n    this.__sortFn = this.__functionFromPropertyValue(sort);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __filterChanged(filter) {\n    this.__filterFn = this.__functionFromPropertyValue(filter);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __computeFrameTime(rate) {\n    return Math.ceil(1000/rate);\n  }\n\n  __initializeChunking() {\n    if (this.initialCount) {\n      this.__limit = this.initialCount;\n      this.__chunkCount = this.initialCount;\n      this.__lastChunkTime = performance.now();\n    }\n  }\n\n  __tryRenderChunk() {\n    // Debounced so that multiple calls through `_render` between animation\n    // frames only queue one new rAF (e.g. array mutation & chunked render)\n    if (this.items && this.__limit < this.items.length) {\n      this.__debounceRender(this.__requestRenderChunk);\n    }\n  }\n\n  __requestRenderChunk() {\n    requestAnimationFrame(()=>this.__renderChunk());\n  }\n\n  __renderChunk() {\n    // Simple auto chunkSize throttling algorithm based on feedback loop:\n    // measure actual time between frames and scale chunk count by ratio\n    // of target/actual frame time\n    let currChunkTime = performance.now();\n    let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);\n    this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n    this.__limit += this.__chunkCount;\n    this.__lastChunkTime = currChunkTime;\n    this.__debounceRender(this.__render);\n  }\n\n  __observeChanged() {\n    this.__observePaths = this.observe &&\n      this.observe.replace('.*', '.').split(' ');\n  }\n\n  __itemsChanged(change) {\n    if (this.items && !Array.isArray(this.items)) {\n      console.warn('dom-repeat expected array for `items`, found', this.items);\n    }\n    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n    // path to that instance synchronously (returns false for non-item paths)\n    if (!this.__handleItemPath(change.path, change.value)) {\n      // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n      // so queue a full refresh\n      this.__initializeChunking();\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  __handleObservedPaths(path) {\n    // Handle cases where path changes should cause a re-sort/filter\n    if (this.__sortFn || this.__filterFn) {\n      if (!path) {\n        // Always re-render if the item itself changed\n        this.__debounceRender(this.__render, this.delay);\n      } else if (this.__observePaths) {\n        // Otherwise, re-render if the path changed matches an observed path\n        let paths = this.__observePaths;\n        for (let i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__debounceRender(this.__render, this.delay);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {function(this:DomRepeat)} fn Function to debounce.\n   * @param {number=} delay Delay in ms to debounce by.\n   */\n  __debounceRender(fn, delay = 0) {\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , delay > 0 ? timeOut.after(delay) : microTask\n        , fn.bind(this));\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   * @return {void}\n   */\n  render() {\n    // Queue this repeater, then flush all in order\n    this.__debounceRender(this.__render);\n    flush();\n  }\n\n  __render() {\n    if (!this.__ensureTemplatized()) {\n      // No template found yet\n      return;\n    }\n    this.__applyFullRefresh();\n    // Reset the pool\n    // TODO(kschaaf): Reuse pool across turns and nested templates\n    // Now that objects/arrays are re-evaluated when set, we can safely\n    // reuse pooled instances across turns, however we still need to decide\n    // semantics regarding how long to hold, how many to hold, etc.\n    this.__pool.length = 0;\n    // Set rendered item count\n    this._setRenderedItemCount(this.__instances.length);\n    // Notify users\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n    // Check to see if we need to render more items\n    this.__tryRenderChunk();\n  }\n\n  __applyFullRefresh() {\n    let items = this.items || [];\n    let isntIdxToItemsIdx = new Array(items.length);\n    for (let i=0; i<items.length; i++) {\n      isntIdxToItemsIdx[i] = i;\n    }\n    // Apply user filter\n    if (this.__filterFn) {\n      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n        this.__filterFn(items[i], idx, array));\n    }\n    // Apply user sort\n    if (this.__sortFn) {\n      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n    }\n    // items->inst map kept for item path forwarding\n    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n    let instIdx = 0;\n    // Generate instances and assign items\n    const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);\n    for (; instIdx<limit; instIdx++) {\n      let inst = this.__instances[instIdx];\n      let itemIdx = isntIdxToItemsIdx[instIdx];\n      let item = items[itemIdx];\n      itemsIdxToInstIdx[itemIdx] = instIdx;\n      if (inst) {\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        this.__insertInstance(item, instIdx, itemIdx);\n      }\n    }\n    // Remove any extra instances from previous state\n    for (let i=this.__instances.length-1; i>=instIdx; i--) {\n      this.__detachAndRemoveInstance(i);\n    }\n  }\n\n  __detachInstance(idx) {\n    let inst = this.__instances[idx];\n    const wrappedRoot = wrap(inst.root);\n    for (let i=0; i<inst.children.length; i++) {\n      let el = inst.children[i];\n      wrappedRoot.appendChild(el);\n    }\n    return inst;\n  }\n\n  __attachInstance(idx, parent) {\n    let inst = this.__instances[idx];\n    // Note, this is pre-wrapped as an optimization\n    parent.insertBefore(inst.root, this);\n  }\n\n  __detachAndRemoveInstance(idx) {\n    let inst = this.__detachInstance(idx);\n    if (inst) {\n      this.__pool.push(inst);\n    }\n    this.__instances.splice(idx, 1);\n  }\n\n  __stampInstance(item, instIdx, itemIdx) {\n    let model = {};\n    model[this.as] = item;\n    model[this.indexAs] = instIdx;\n    model[this.itemsIndexAs] = itemIdx;\n    return new this.__ctor(model);\n  }\n\n  __insertInstance(item, instIdx, itemIdx) {\n    let inst = this.__pool.pop();\n    if (inst) {\n      // TODO(kschaaf): If the pool is shared across turns, hostProps\n      // need to be re-set to reused instances in addition to item\n      inst._setPendingProperty(this.as, item);\n      inst._setPendingProperty(this.indexAs, instIdx);\n      inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n      inst._flushProperties();\n    } else {\n      inst = this.__stampInstance(item, instIdx, itemIdx);\n    }\n    let beforeRow = this.__instances[instIdx + 1];\n    let beforeNode = beforeRow ? beforeRow.children[0] : this;\n    wrap(wrap(this).parentNode).insertBefore(inst.root, beforeNode);\n    this.__instances[instIdx] = inst;\n    return inst;\n  }\n\n  // Implements extension point from Templatize mixin\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hidden Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hidden) {\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__instances[i]._showHideChildren(hidden);\n    }\n  }\n\n  // Called as a side effect of a host items.<key>.<path> path change,\n  // responsible for notifying item.<path> changes to inst for key\n  __handleItemPath(path, value) {\n    let itemsPath = path.slice(6); // 'items.'.length == 6\n    let dot = itemsPath.indexOf('.');\n    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n    // If path was index into array...\n    if (itemsIdx == parseInt(itemsIdx, 10)) {\n      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n      // If the path is observed, it will trigger a full refresh\n      this.__handleObservedPaths(itemSubPath);\n      // Note, even if a rull refresh is triggered, always do the path\n      // notification because unless mutableData is used for dom-repeat\n      // and all elements in the instance subtree, a full refresh may\n      // not trigger the proper update.\n      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n      let inst = this.__instances[instIdx];\n      if (inst) {\n        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n        // This is effectively `notifyPath`, but avoids some of the overhead\n        // of the public API\n        inst._setPendingPropertyOrPath(itemPath, value, false, true);\n        inst._flushProperties();\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Returns the item associated with a given element stamped by\n   * this `dom-repeat`.\n   *\n   * Note, to modify sub-properties of the item,\n   * `modelForElement(el).set('item.<sub-prop>', value)`\n   * should be used.\n   *\n   * @param {!HTMLElement} el Element for which to return the item.\n   * @return {*} Item associated with the element.\n   */\n  itemForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.as];\n  }\n\n  /**\n   * Returns the inst index for a given element stamped by this `dom-repeat`.\n   * If `sort` is provided, the index will reflect the sorted order (rather\n   * than the original array order).\n   *\n   * @param {!HTMLElement} el Element for which to return the index.\n   * @return {?number} Row index associated with the element (note this may\n   *   not correspond to the array index if a user `sort` is applied).\n   */\n  indexForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.indexAs];\n  }\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model\n   * should be used to manipulate data associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @param {!HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   */\n  modelForElement(el) {\n    return modelForElement(this.template, el);\n  }\n\n}\n\ncustomElements.define(DomRepeat.is, DomRepeat);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport {enqueueDebouncer, flushDebouncers} from '../utils/debounce.js';\nexport {enqueueDebouncer};\n\n/**\n * Forces several classes of asynchronously queued tasks to flush:\n * - Debouncers added via `enqueueDebouncer`\n * - ShadyDOM distribution\n *\n * @return {void}\n */\nexport const flush = function() {\n  let shadyDOM, debouncers;\n  do {\n    shadyDOM = window.ShadyDOM && ShadyDOM.flush();\n    if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {\n      window.ShadyCSS.ScopingShim.flush();\n    }\n    debouncers = flushDebouncers();\n  } while (shadyDOM || debouncers);\n};\n"],"sourceRoot":""}